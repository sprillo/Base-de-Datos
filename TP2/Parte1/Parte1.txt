------------------------------- QUERY 1 --------------------------------
-- Los empleados que atendieron clientes mayores de edad.

-- Definicion de la tabla empleados
empleados : {
	nro_legajo : INTEGER
	nombre : STRING
	clientes_atendidos : [{dni : STRING, edad : INTEGER, fecha : DATETIME}]
	sectores_donde_trabaja : [{cod_sector : INTEGER, id_tarea : INTEGER}]
}

-- Populo la tabla empleados
db.empleados.insert({
	nro_legajo : 1,
	nombre : "empleado1",
	clientes_atendidos : [	{dni : "11111111", edad : 18, fecha : "01/01/2015"},
							{dni : "22222222", edad : 17, fecha : "01/02/2015"}],
	sectores_donde_trabaja : [{cod_sector : 1, id_tarea : 1}]
})

db.empleados.insert({
	nro_legajo : 2,
	nombre : "empleado2",
	clientes_atendidos : [ {dni : "22222222", edad : 17, fecha : "02/02/2015"} ],
	sectores_donde_trabaja : [{cod_sector : 1, id_tarea : 1}]
})


db.empleados.insert({
	nro_legajo : 3,
	nombre : "empleado3",
	clientes_atendidos : [],
	sectores_donde_trabaja : [{cod_sector : 1, id_tarea : 1}]
})

db.empleados.insert({
	nro_legajo : 4,
	nombre : "empleado4",
	clientes_atendidos : [],
	sectores_donde_trabaja : [{cod_sector : 1, id_tarea : 1}]
})


-- Query 1
-- Devuelve todos los empleados tales que algun atiende.cliente.edad sea >= 18
db.empleados.find(
	{"clientes_atendidos.edad" : {$gte : 18}},
	{nro_legajo : 1, nombre : 1}
)

-- Otra forma de hacerlo:
db.empleados.find(
	{"clientes_atendidos" : {$elemMatch : {"edad" : {$gte : 18}}}},
	{nro_legajo : 1, nombre : 1}
)

------------------------------- QUERY 2 --------------------------------
-- Los articulos mas vendidos.

-- Definicion de la tabla articulos
articulos{
	codigo : STRING
	nombre : STRING
	ventas : [{dni : STRING}]
}

db.articulos.insert({
	codigo : "1",
	nombre : "articulo1",
	ventas : [{dni : "11111111"}, {dni : "22222222"}]
})

db.articulos.insert({
	codigo : "2",
	nombre : "articulo2",
	ventas : [{dni : "11111111"}]
})

-- Query 2

-- Esta es la query que no me sale... El pseudocodigo de lo que quiero hacer es este, pero no se que poner en el $match
db.articulos.aggregate([
	{$project : {"cant_ventas" : {$size : "$ventas"}}},
	{$sort : {"cant_ventas" : -1}},
	{$match : {"cant_ventas" : "cant_ventas en el primer documento de la coleccion esta..."}}
])

db.articulos.aggregate([
	{$project : {"cant_ventas" : {$size : "$ventas"}}},
	{$sort : {"cant_ventas" : -1}},
])

------------------------------- QUERY 3 --------------------------------

-- Definicion de la tabla sectores
sectores{
	cod_sector : INTEGER
	articulos : [{codigo : STRING}]
	trabaja : [{nro_legajo : INTEGER, id_tarea : INTEGER}]
}

db.sectores.insert({
	codigoSector : 1,
	articulos : [{codigo : "1"}],
	trabaja : [	{nro_legajo : 1, id_tarea : 1},
				{nro_legajo : 2, id_tarea : 1},
				{nro_legajo : 3, id_tarea : 1},
				{nro_legajo : 4, id_tarea : 1}]
})

db.sectores.insert({
	codigoSector : 2,
	articulos : [{codigo : "2"}],
	trabaja : [	{nro_legajo : 1, id_tarea : 1},
				{nro_legajo : 2, id_tarea : 1},
				{nro_legajo : 3, id_tarea : 1}]
})

-- Query 3

db.sectores.find(
	{trabaja : {$size : 3}}
)

------------------------------- QUERY 4 --------------------------------
-- El empleado que trabaja en mas sectores.

-- Hack usando unwind
-- Se puede hacer sin unwind si se pone una coleccion "empleado_y_sus_sectores"

db.sectores.aggregate([
	{$project : {empleado : "$trabaja.empleado"}},
	{$unwind : "$empleado"},
	{$group :{
		_id : "$empleado",
		cant_empleado : {$sum : 1}
	}},
	{$sort : {cant_empleado : -1}},
	{$limit : 1}
])

------------------------------- QUERY 5 --------------------------------
-- Ranking de los clientes con mayor cantidad de compras.

-- La tabla de articulos era:
articulos{
	codigo : STRING
	nombre : STRING
	ventas : [{dni : STRING, nombre : STRING, edad : INTEGER}]
}

-- Query 5
-- De vuelta hago el hack usando unwind
-- Se puede sacar el unwind si se pone una coleccion "cliente_y_sus_compras"

db.articulos.aggregate([
	{$unwind : "$ventas"},
	{$group :{
		_id : "$ventas",
		cant_compras : {$sum : 1}
	}},
	{$sort : {cant_compras : -1}}
])

------------------------------- QUERY 6 --------------------------------
-- Cantidad de compras realizadas por clientes de misma edad.

-- La tabla de articulos era:
articulos{
	codigo : STRING
	nombre : STRING
	ventas : [{dni : STRING, nombre : STRING, edad : INTEGER}]
}

-- Se puede hacer sin unwind usando la misma coleccion que en la query 5: "cliente_y_sus_compras"

db.articulos.aggregate([
	{$unwind : "$ventas"},
	{$group :{
		_id : "$ventas.edad",
		cant_compras : {$sum : 1}
	}}
])
